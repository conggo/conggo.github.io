<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安卓View的绘制流程</title>
      <link href="/2020/08/06/%E5%AE%89%E5%8D%93View%E7%9A%84%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B/"/>
      <url>/2020/08/06/%E5%AE%89%E5%8D%93View%E7%9A%84%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-View的绘制流程"><a href="#Android-View的绘制流程" class="headerlink" title="Android View的绘制流程"></a>Android View的绘制流程</h1><p><em>不要停下脚步，一往无前</em></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Android View的绘制流程是View相关的核心知识点，也是高阶UI必须要了解的前提。在Android系统中，Window是最基本的窗口单元，每个activity都会创建一个，PhoneWindow是Window的唯一实现类，是View系统和Activity（可以理解为控制器）之前的纽带。Window下有个DecorView,DecorView是一个FrameLayout,是我们自己布局的载体。</p><img src="https://i.loli.net/2020/07/31/RKxu2lNYaC9LnX3.jpg" style="zoom:70%;"><h2 id="一、window的创建"><a href="#一、window的创建" class="headerlink" title="一、window的创建"></a>一、window的创建</h2><p>startActivity最终会调用到ActivityThread的handleLaunchActivity方法来创建Activity，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleLaunchActivity</span><span class="token punctuation">(</span>ActivityClientRecord r<span class="token punctuation">,</span> Intent customIntent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 创建Activity，会调用Activity的onCreate方法</span>    <span class="token comment" spellcheck="true">// 从而完成window的创建</span>    Activity a <span class="token operator">=</span> <span class="token function">performLaunchActivity</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> customIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span>createdConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span>mConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>        Bundle oldState <span class="token operator">=</span> r<span class="token punctuation">.</span>state<span class="token punctuation">;</span>        <span class="token function">handleResumeActivity</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>tolen<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>isForward<span class="token punctuation">,</span> <span class="token operator">!</span>r<span class="token punctuation">.</span>activity<span class="token punctuation">.</span><span class="token punctuation">.</span>mFinished <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>r<span class="token punctuation">.</span>startsNotResumed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>具体的创建过程是在performLaunchActivity方法中完成的，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Activity <span class="token function">performLaunchActivity</span><span class="token punctuation">(</span>ActivityClientRecord r<span class="token punctuation">,</span> Intent customIntent<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token comment" spellcheck="true">// 根据反射创建activity</span>        Activity activity <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassLoader cl <span class="token operator">=</span> r<span class="token punctuation">.</span>packageInfo<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            activity <span class="token operator">=</span> mInstrumentation<span class="token punctuation">.</span><span class="token function">newActivity</span><span class="token punctuation">(</span>                    cl<span class="token punctuation">,</span> component<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>               <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Application app <span class="token operator">=</span> r<span class="token punctuation">.</span>packageInfo<span class="token punctuation">.</span><span class="token function">makeApplication</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> mInstrumentation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>activity <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ......           </span>                Window window <span class="token operator">=</span> null<span class="token punctuation">;</span>                   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                  <span class="token comment" spellcheck="true">// actitiy和window绑定</span>                activity<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>appContext<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>token<span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>ident<span class="token punctuation">,</span> app<span class="token punctuation">,</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">,</span> r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">,</span> title<span class="token punctuation">,</span> r<span class="token punctuation">.</span>parent<span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>embeddedID<span class="token punctuation">,</span> r<span class="token punctuation">.</span>lastNonConfigurationInstances<span class="token punctuation">,</span> config<span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>referrer<span class="token punctuation">,</span> r<span class="token punctuation">.</span>voiceInteractor<span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>               <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> activity<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>activity的attach方法，将window与activity绑定：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>Window window<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">attachBaseContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        mFragments<span class="token punctuation">.</span><span class="token function">attachHost</span><span class="token punctuation">(</span>null <span class="token comment" spellcheck="true">/*parent*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建PhoneWindow，并赋值给activity的mWindow成员</span>        mWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneWindow</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>        mWindow<span class="token punctuation">.</span><span class="token function">setWindowControllerCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mWindow<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mWindow<span class="token punctuation">.</span><span class="token function">setOnWindowDismissedCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mWindow<span class="token punctuation">.</span><span class="token function">getLayoutInflater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPrivateFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="二、DecorView的创建和加载"><a href="#二、DecorView的创建和加载" class="headerlink" title="二、DecorView的创建和加载"></a>二、DecorView的创建和加载</h2><p>创建好Activity，并且与创建好的Window绑定后，会调用ActivityThread的handleResumeActivity方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">handleResumeActivity</span><span class="token punctuation">(</span>IBinder token<span class="token punctuation">,</span><span class="token keyword">boolean</span> clearHide<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isForward<span class="token punctuation">,</span>     <span class="token keyword">boolean</span> reallyResume<span class="token punctuation">,</span> <span class="token keyword">int</span> seq<span class="token punctuation">,</span> String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">unscheduleGcIdler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mSomeActivitiesChanged <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用activity的onResume方法</span>    r <span class="token operator">=</span> <span class="token function">performResumeActivity</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> clearHide<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Activity a <span class="token operator">=</span> r<span class="token punctuation">.</span>activity<span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>window <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>a<span class="token punctuation">.</span>mFinished <span class="token operator">&amp;&amp;</span> willBeVisible<span class="token punctuation">)</span> <span class="token punctuation">{</span>            r<span class="token punctuation">.</span>window <span class="token operator">=</span> r<span class="token punctuation">.</span>activity<span class="token punctuation">.</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 获取到window中的decorView</span>            View decor <span class="token operator">=</span> r<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            decor<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>INVISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 得到了WindowManager，WindowManager是一个接口</span>            <span class="token comment" spellcheck="true">// 并且继承了接口ViewManager</span>            ViewManager wm <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getWindowManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            WindowManager<span class="token punctuation">.</span>LayoutParams l <span class="token operator">=</span> r<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span>mDecor <span class="token operator">=</span> decor<span class="token punctuation">;</span>            l<span class="token punctuation">.</span>type <span class="token operator">=</span> WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>TYPE_BASE_APPLICATION<span class="token punctuation">;</span>            l<span class="token punctuation">.</span>softInputMode <span class="token operator">|=</span> forwardBit<span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// 实际调用的是WindowManagerImpl(WindowManager接口实现类)的addView方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>mVisibleFromClient <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>a<span class="token punctuation">.</span>mWindowAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token punctuation">.</span>mWindowAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                wm<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>decor<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>除了Window和DecorView这两个主力之外，还有一个很重要的角色是ViewRoot,ViewRoot是连接WindowManager和DecorView之间的纽带，View的三大流程均由其来完成。在ActivityThread中，当Activity对象被创建完毕后，会将DecorView添加到Window中，同时会创建ViewRootImpl对象，并将ViewRootImpl对象和DecorView建立关联，相关源码如下所示：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// WindowManagerGlobal的addView方法中</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addView</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> ViewGroup<span class="token punctuation">.</span>LayoutParams params<span class="token punctuation">,</span>        Display display<span class="token punctuation">,</span> Window parentWindow<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    ViewRootImpl root<span class="token punctuation">;</span>    View panelParentView <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 创建ViewRootImpl实例</span>        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ViewRootImpl</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> display<span class="token punctuation">)</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>wparams<span class="token punctuation">)</span><span class="token punctuation">;</span>        mViews<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>        mRoots<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        mParams<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wparams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 把DecorView加载到Window中</span>        root<span class="token punctuation">.</span><span class="token function">setView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> wparams<span class="token punctuation">,</span> panelParentView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// BadTokenException or InvalidDisplayException, clean up.</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">findViewLocked</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">removeViewLocked</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三、绘制的整体流程"><a href="#三、绘制的整体流程" class="headerlink" title="三、绘制的整体流程"></a>三、绘制的整体流程</h2><p>整个绘图流程在<code>ViewRoot</code>类的<code>performTraversals()</code>函数展开，该函数所做 的工作可简单概况为是否需要重新计算视图大小(<code>measure</code>)、是否需要重新安置视图的位置(<code>layout</code>)、以及是否需要重绘(<code>draw</code>)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">performTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//最外层ViewGroup是MATCH_PARENT,在实例被创建时确定</span>    <span class="token keyword">int</span> childWidthMeasureSpec <span class="token operator">=</span> <span class="token function">getRootMeasureSpec</span><span class="token punctuation">(</span>mWidth<span class="token punctuation">,</span> lp<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> childHeightMeasureSpec <span class="token operator">=</span> <span class="token function">getRootMeasureSpec</span><span class="token punctuation">(</span>mHeight<span class="token punctuation">,</span> lp<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//测量流程</span>    <span class="token function">performMeasure</span><span class="token punctuation">(</span>childWidthMeasureSpec<span class="token punctuation">,</span> childHeightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//布局流程</span>    <span class="token function">performLayout</span><span class="token punctuation">(</span>lp<span class="token punctuation">,</span> mWidth<span class="token punctuation">,</span> mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//绘制流程</span>    <span class="token function">performDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>大概的流程图如下：</p><img src="https://i.loli.net/2020/07/31/lW59dYgcvQpzDtI.png" style="zoom:50%;"><h3 id="0-MeasureSpec"><a href="#0-MeasureSpec" class="headerlink" title="0.MeasureSpec"></a>0.MeasureSpec</h3><p>需要先了解MeasureSpec，它是一个32位的整形值，其高2位表示测量模式SpecMode,低30位表示某个测试模式下的规格大小SpecSize。</p><p>测量模式有三种：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 不指定模式, 父视图没有限制子视图的大小，子视图可以是想要</span><span class="token comment" spellcheck="true">// 的任何尺寸，通常用于系统内部，应用开发中很少用到。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNSPECIFIED <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> MODE_SHIFT<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 精确模式，视图宽高指定为match_parent或具体数值时生效，</span><span class="token comment" spellcheck="true">// 表示父视图已经决定了子视图的精确大小，这种模式下View的测量</span><span class="token comment" spellcheck="true">// 值就是SpecSize的值。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EXACTLY     <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> MODE_SHIFT<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最大值测量模式，当视图的宽高指定为wrap_content时生效，此时</span><span class="token comment" spellcheck="true">// 子视图的尺寸可以是不超过父视图允许的最大尺寸的任何尺寸。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> AT_MOST     <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> MODE_SHIFT<span class="token punctuation">;</span></code></pre><h4 id="1-DocerView的MeasureSpec创建"><a href="#1-DocerView的MeasureSpec创建" class="headerlink" title="1) DocerView的MeasureSpec创建"></a>1) DocerView的MeasureSpec创建</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//desiredWindowWidth和desiredWindowHeight是屏幕的尺寸</span>childWidthMeasureSpec <span class="token operator">=</span> <span class="token function">getRootMeasureSpec</span><span class="token punctuation">(</span>desiredWindowWidth<span class="token punctuation">,</span> lp<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>childHeightMeasureSpec <span class="token operator">=</span> <span class="token function">getRootMeasureSpec</span><span class="token punctuation">(</span>desiredWindowHeight<span class="token punctuation">,</span> lp<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">performMeasure</span><span class="token punctuation">(</span>childWidthMeasureSpec<span class="token punctuation">,</span> childHeightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getRootMeaureSpec</span><span class="token punctuation">(</span><span class="token keyword">int</span> windowSize<span class="token punctuation">,</span> <span class="token keyword">int</span> rootDimension<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> measureSpec<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>rootDimension<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATRCH_PARENT<span class="token operator">:</span>            <span class="token comment" spellcheck="true">// Window can't resize. Force root view to be windowSize.</span>            measureSpec <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>windowSize<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT：            <span class="token comment" spellcheck="true">// Window can resize. Set max size for root view.</span>            measureSpec <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>windowSize<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token comment" spellcheck="true">// Window wants to be an exact size. Force root view to be that size.</span>            measureSpec <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>rootDimension<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> measureSpec<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2）子View的MeasureSpec创建"><a href="#2）子View的MeasureSpec创建" class="headerlink" title="2）子View的MeasureSpec创建"></a>2）子View的MeasureSpec创建</h4><p>子View的MeasureSpec值是根据子View的布局参数（LayoutParams）和父容器的MeasureSpec值计算得来的，具 体计算逻辑封装在getChildMeasureSpec()里。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**** 目标是将父控件的测量规格和child view的布局参数LayoutParams相结合，得到一个 * 最可能符合条件的child *    view的测量规格。* @param spec 父控件的测量规格* @param padding 父控件里已经占用的大小* @param childDimension child view布局LayoutParams里的尺寸* @return child view 的测量规格*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getChildMeasureSpec</span><span class="token punctuation">(</span><span class="token keyword">int</span> spec<span class="token punctuation">,</span> <span class="token keyword">int</span> padding<span class="token punctuation">,</span> <span class="token keyword">int</span> childDimesion<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> specMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父控件的测量模式</span>    <span class="token keyword">int</span> specSize <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父控件的测量大小</span>    <span class="token comment" spellcheck="true">// padding是指父容器中已占用的空间大小，因此子元素可用的</span>    <span class="token comment" spellcheck="true">// 大小为父容器的尺寸减去padding</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> specSize <span class="token operator">-</span> padding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> resultSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> resultMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>sepcMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当父控件的测量模式 是 精确模式，也就是有精确的尺寸了 </span>        <span class="token keyword">case</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//如果child的布局参数有固定值，比如"layout_width" = "100dp"</span>                        <span class="token comment" spellcheck="true">//那么显然child的测量规格也可以确定下来了，测量大小就是100dp，测量模式也是EXACTLY</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> childDimension<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                 <span class="token comment" spellcheck="true">//如果child的布局参数是"match_parent"，也就是想要占满父控件</span>                <span class="token comment" spellcheck="true">//而此时父控件是精确模式，也就是能确定自己的尺寸了，那child也能确定自己大小了</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Child wants to be our size. So be it.</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                 <span class="token comment" spellcheck="true">//如果child的布局参数是"wrap_content"，也就是想要根据自己的逻辑决定自己大小， </span>                <span class="token comment" spellcheck="true">//比如TextView根据设置的字符串大小来决定自己的大小</span>                        <span class="token comment" spellcheck="true">//那就自己决定自己的大小，不过你的大小肯定不能大于父控件的大小</span>                        <span class="token comment" spellcheck="true">//所以测量模式就是AT_MOST，测量大小就是父控件的size</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimesion <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当父控件的测量模式 是 最大模式，也就是说父控件自己还不知道自己的尺寸，但是大小不能超过size </span>        <span class="token keyword">case</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//同样的，既然child能确定自己大小，尽管父控件自己还不知道自己大小，也优先满足孩子的需求</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> childDimension<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                 <span class="token comment" spellcheck="true">//child想要和父控件一样大，但父控件自己也不确定自己大小，所以child也无法确定自己大小 </span>                <span class="token comment" spellcheck="true">//但同样的，child的尺寸上限也是父控件的尺寸上限size</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                 <span class="token comment" spellcheck="true">//child想要根据自己逻辑决定大小，那就自己决定自己的尺寸，但不能超过父控件</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Parent asked to see how big we want to be</span>        <span class="token keyword">case</span> MeasureSpec<span class="token punctuation">.</span>UNSPECIFIED<span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Child wants a specific size... let him have it</span>                resultSize <span class="token operator">=</span> childDimension<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Child wants to be our size... find out how big it should be</span>                resultSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>UNSPECIFIED<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Child wants to determine its own size....</span>                <span class="token comment" spellcheck="true">// find out how big it should be</span>                resultSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                resultMode <span class="token operator">==</span> MeasureSpec<span class="token punctuation">.</span>UNSPECIFIED<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>resultSize<span class="token punctuation">,</span> resultMode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到，对于应用层 View ，其 MeasureSpec 由父容器的 MeasureSpec 和自身的 LayoutParams 来共同决定对于不同的父容器和view本身不同的LayoutParams，view就可以有多种MeasureSpec。 </p><ol><li>当view采用固定宽 高的时候，不管父容器的MeasureSpec是什么，view的MeasureSpec都是精确模式并且其大小遵循Layoutparams中的大小； </li><li>当view的宽高是match_parent时，这个时候如果父容器的模式是精准模式，那么 view也是精准模式并且其大小是父容器的剩余空间，如果父容器是最大模式，那么view也是最大模式并且其大小不会超过父容器的剩余空间； </li><li>当view的宽高是wrap_content时，不管父容器的模式是精准还是最大化，view的模式总是最大化并且大小不能超过父容器的剩余空间。 </li><li>Unspeciﬁed模式，这个模式主要用于系统内 部多次measure的情况下，一般来说，我们不需要关注此模式。</li></ol><h3 id="1-measure流程"><a href="#1-measure流程" class="headerlink" title="1. measure流程"></a>1. measure流程</h3><p>测试流程从ViewRootImpl.performMeasure()开始：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//=============ViewRootImpl.java==============</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">performMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> childWidthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> childHeightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       mView<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span>childWidthMeasureSpec<span class="token punctuation">,</span> childHeightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>此处的mView在<code>ViewRootImpl</code>的<code>setView</code>方法中赋值</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//=============ViewRootImpl.java==============</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setView</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> WindowManager<span class="token punctuation">.</span>LayoutParams attrs<span class="token punctuation">,</span> View panelParentView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token comment" spellcheck="true">// 此处的view，就是在ActivityThread的addView方法中传过来的，也就是DecorView</span>      mView <span class="token operator">=</span> view<span class="token punctuation">;</span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token comment" spellcheck="true">// 此处attrs，就是在ActivityThread的addView方法中传过来的</span>      mWindowAttributes<span class="token punctuation">.</span><span class="token function">copyFrom</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>可以看到，从ViewRootImpl的performMeasure方法开始，一开始进行测试流程的就是从<code>DecorView</code>的<code>measure()</code>操作开始的，追踪代码进入到View的<code>measure()</code>方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//=============View.java==============</span><span class="token comment" spellcheck="true">/** * &lt;p> * This is called to find out how big a view should be. The parent * supplies constraint information in the width and height parameters. * &lt;/p> * * &lt;p> * The actual measurement work of a view is performed in * {@link #onMeasure(int, int)}, called by this method. Therefore, only * {@link #onMeasure(int, int)} can and must be overridden by subclasses.     view的实际测量工作是在onMeasure()方法中完成的，其子类可以并且必须实现该方法。 * &lt;/p> * * * @param widthMeasureSpec Horizontal space requirements as imposed by the *        parent * @param heightMeasureSpec Vertical space requirements as imposed by the *        parent * * @see #onMeasure(int, int) */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">measure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// measure ourselves, this should set the measured dimension flag back</span>    <span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token punctuation">}</span></code></pre><p>再看我们熟悉的这个<code>onMeasure(int,int)</code>方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//=============View.java==============</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">*</span> Measure the view and its content to determine the measured width and the<span class="token operator">*</span> measured height<span class="token punctuation">.</span> This method is invoked by <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> #<span class="token function">measure</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">}</span> and<span class="token operator">*</span> should be overridden by subclasses to provide accurate and efficient<span class="token operator">*</span> measurement of their contents<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">*</span> <span class="token operator">&lt;</span>strong<span class="token operator">></span>CONTRACT<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>strong<span class="token operator">></span> When overriding <span class="token keyword">this</span> method<span class="token punctuation">,</span> you<span class="token operator">*</span> <span class="token operator">&lt;</span>em<span class="token operator">></span>must<span class="token operator">&lt;</span><span class="token operator">/</span>em<span class="token operator">></span> call <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> #<span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">}</span> to store the<span class="token operator">*</span> measured width and height of <span class="token keyword">this</span> view<span class="token punctuation">.</span> Failure to <span class="token keyword">do</span> so will trigger an<span class="token operator">*</span> <span class="token operator">&lt;</span>code<span class="token operator">></span>IllegalStateException<span class="token operator">&lt;</span><span class="token operator">/</span>code<span class="token operator">></span><span class="token punctuation">,</span> thrown by<span class="token operator">*</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> #<span class="token function">measure</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span> Calling the superclass'<span class="token operator">*</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> #<span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">}</span> is a valid use<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">*</span> The base <span class="token keyword">class</span> <span class="token class-name">implementation</span> of measure defaults to the background size<span class="token punctuation">,</span><span class="token operator">*</span> unless a larger size is allowed by the MeasureSpec<span class="token punctuation">.</span> Subclasses should<span class="token operator">*</span> override <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> #<span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">}</span> to provide better measurements of<span class="token operator">*</span> their content<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">*</span> If <span class="token keyword">this</span> method is overridden<span class="token punctuation">,</span> it is the subclass's responsibility to make<span class="token operator">*</span> sure the measured height and width are at least the view's minimum height<span class="token operator">*</span> and <span class="token function">width</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> #<span class="token function">getSuggestedMinimumHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> and<span class="token operator">*</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> #<span class="token function">getSuggestedMinimumWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">*</span><span class="token operator">*</span> <span class="token annotation punctuation">@param</span> widthMeasureSpec horizontal space requirements as imposed by the parent<span class="token punctuation">.</span><span class="token operator">*</span>                         The requirements are encoded with<span class="token operator">*</span>                         <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">.</span>MeasureSpec<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token annotation punctuation">@param</span> heightMeasureSpec vertical space requirements as imposed by the parent<span class="token punctuation">.</span><span class="token operator">*</span>                         The requirements are encoded with<span class="token operator">*</span>                         <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">.</span>MeasureSpec<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token annotation punctuation">@see</span> #<span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token annotation punctuation">@see</span> #<span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token annotation punctuation">@see</span> #<span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token annotation punctuation">@see</span> #<span class="token function">getSuggestedMinimumHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token annotation punctuation">@see</span> #<span class="token function">getSuggestedMinimumWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token annotation punctuation">@see</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">.</span>MeasureSpec#<span class="token function">getMode</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token annotation punctuation">@see</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">.</span>MeasureSpec#<span class="token function">getSize</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token function">getDefaultSize</span><span class="token punctuation">(</span><span class="token function">getSuggestedMinimumWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">getDefaultSize</span><span class="token punctuation">(</span><span class="token function">getSuggestedMinimumHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>方法很短，注释却很长，注意注释的第二段：当重写这个方法时，你必须调用<code>setMeasuredDimension(int, int)</code>方法来保存View的宽高尺寸，不然的话，会抛出IllegalStateException异常。此方法的调用，也代表着测量阶段的结束。</p><p>对于ViewGroup的测量，主要是通过measureChild方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 请求所有的子View去测量自己, 要考虑到子View的测量要求MeasureSpec及其padding. * 会跳过所有状态为GONE的子View, 最主要的工作是在getChildMeasureSpec方法中处理的 * @param widthMeasureSpec The width requirements for this view * @param heightMeasureSpec The height requirements for this view */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">measureChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> mChildrenCount<span class="token punctuation">;</span>    <span class="token keyword">final</span> View<span class="token punctuation">[</span><span class="token punctuation">]</span> children <span class="token operator">=</span> mChildren<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> View child <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>mViewFlags <span class="token operator">&amp;</span> VISIBILITY_MASK<span class="token punctuation">)</span> <span class="token operator">!=</span> GONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">measureChild</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">measureChild</span><span class="token punctuation">(</span>View child<span class="token punctuation">,</span> <span class="token keyword">int</span> parentWidthMeasureSpec<span class="token punctuation">,</span>        <span class="token keyword">int</span> parentHeightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> LayoutParams lp <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> childWidthMeasureSpec <span class="token operator">=</span> <span class="token function">getChildMeasureSpec</span><span class="token punctuation">(</span>parentWidthMeasureSpec<span class="token punctuation">,</span>            mPaddingLeft <span class="token operator">+</span> mPaddingRight<span class="token punctuation">,</span> lp<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> childHeightMeasureSpec <span class="token operator">=</span> <span class="token function">getChildMeasureSpec</span><span class="token punctuation">(</span>parentHeightMeasureSpec<span class="token punctuation">,</span>            mPaddingTop <span class="token operator">+</span> mPaddingBottom<span class="token punctuation">,</span> lp<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    child<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span>childWidthMeasureSpec<span class="token punctuation">,</span> childHeightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**   * 最繁重的工作都在此方法中，也就是为每个子View计算出它的测量规则MeasureSpec  * 此方法在对上一小节"子View的MeasureSpec创建"的介绍中已经分析过。  * 目标是将 ChildView 的 MeasureSpec 和 LayoutParams 结合起来去得到一个最合适的结果。  *  * @param spec 对该 View 的测绘要求  * @param padding 当前 View 在当前唯独上的 paddingand，也有可能含有 margins  *  * @param childDimension 在当前维度上（height 或 width）的具体指  * @return 子视图的 MeasureSpec   */</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getChildMeasureSpec</span><span class="token punctuation">(</span><span class="token keyword">int</span> spec<span class="token punctuation">,</span> <span class="token keyword">int</span> padding<span class="token punctuation">,</span> <span class="token keyword">int</span> childDimension<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment" spellcheck="true">// 根据获取到的子视图的测量要求和大小创建子视图的 MeasureSpec</span>     <span class="token keyword">return</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>resultSize<span class="token punctuation">,</span> resultMode<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>然后回到了开始所提及的View的measure()-&gt;onMeasure()-&gt;setDimention()方法。</p><h3 id="2-layout流程"><a href="#2-layout流程" class="headerlink" title="2.layout流程"></a>2.layout流程</h3><p>首先子View的具体位置是相对于父View而言的，View类的onLayout()方法不需要重写,ViewGroup的onLayout是一个抽象方法，必须要实现这一方法。</p><p>layout过程，就是通过测量后的尺寸，获取到view的mMeasuredWidth和mMeasuredHeight,然后通过子View的<code>layout(l,t,r,b)</code>方法来确定子View在父布局中的相对位置。</p><p>从ViewRootImpl的performLayout方法开始：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">performLayout</span><span class="token punctuation">(</span>WindowManager<span class="token punctuation">.</span>LayoutParams lp<span class="token punctuation">,</span> <span class="token keyword">int</span> desiredWindowWidth<span class="token punctuation">,</span>                           <span class="token keyword">int</span> desiredWindowHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ···    <span class="token comment" spellcheck="true">//host，也就是setView方法传进来的DecorView</span>    <span class="token keyword">final</span> View host <span class="token operator">=</span> mView<span class="token punctuation">;</span>  ···    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 调用了DecorView的layout(r,l,t,b)方法，也就是ViewGroup的layout方法</span>      host<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> host<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> host<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ···        <span class="token keyword">if</span> <span class="token punctuation">(</span>numViewsRequestingLayout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          ···            <span class="token keyword">if</span> <span class="token punctuation">(</span>validLayoutRequesters <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              ···                host<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> host<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> host<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              ···            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      ···    <span class="token punctuation">}</span>  ···<span class="token punctuation">}</span></code></pre><p>然后看ViewGroup的layout：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token comment" spellcheck="true">// 方法被final修饰，和measure一样，不能被修改或重写</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">layout</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mSuppressLayout <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mTransition <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>mTransition<span class="token punctuation">.</span><span class="token function">isChangingLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mTransition <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mTransition<span class="token punctuation">.</span><span class="token function">layoutChange</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//直接调用了View的layout方法</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// record the fact that we noop'd it; request layout when transition finishes</span>        mLayoutCalledWhileSuppressed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再看View的layout方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">layout</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ···    <span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token function">isLayoutModeOptical</span><span class="token punctuation">(</span>mParent<span class="token punctuation">)</span> <span class="token operator">?</span>    <span class="token function">setOpticalFrame</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">setFrame</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>changed <span class="token operator">||</span> <span class="token punctuation">(</span>mPrivateFlags <span class="token operator">&amp;</span> PFLAG_LAYOUT_REQUIRED<span class="token punctuation">)</span> <span class="token operator">==</span> PFLAG_LAYOUT_REQUIRED<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">onLayout</span><span class="token punctuation">(</span>changed<span class="token punctuation">,</span> l<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    ···  <span class="token punctuation">}</span>  ···<span class="token punctuation">}</span></code></pre><p>可以看到，真正进行布局的方法是<code>setOpticalFrame(l,t,r,b)</code>和<code>setFrame(l,t,r,b)</code>方法，而setOpticalFrame里面也是调用了<code>setFrame(l,t,r,b)</code>方法。此方法的四个参数确定了其在父View当中的位置。</p><p><code>setFrame(l,t,r,b)</code>方法中会有一个布尔值来判断是否需要对视图进行重绘。</p><p>对子View的布局都是通过onLayout()方法中进行的。</p><p>布局过程也是通过递归的方式进行的，如果子View仍然是父视图，则会继续layout下去，直到遇到子View的onlayout空方法，则该子View布局流程结束。</p><h3 id="3-draw流程"><a href="#3-draw流程" class="headerlink" title="3. draw流程"></a>3. draw流程</h3><p>依然先从ViewRootImpl中的performDraw()方法开始：</p><pre class=" language-JAVA"><code class="language-JAVA">// ----------------ViewRootImpl---------------private void performDraw() {    ...    try {        draw(fullRedrawNeeded);    } finally {        ...    }    ...}private void draw(boolean fullRedrawNeeded) {    Surface surface = mSurface;    if (!surface.isValid()) {        return;    }        .......    if (!dirty.isEmpty() || mIsAnimating || accessibilityFocusDirty) {        if (mAttachInfo.mHardwareRenderer != null && mAttachInfo.mHardwareRenderer.isEnabled()) {            ......        } else {            ......            if (!drawSoftware(surface, mAttachInfo, xOffset, yOffset, scalingRequired, dirty)) {                return;            }        }    }       ......}    private boolean drawSoftware(Surface surface, AttachInfo attachInfo, int xoff, int yoff,boolean scalingRequired, Rect dirty) {                                ......                // 此mView也就是DecorView                mView.draw(canvas);                          ......    }</code></pre><p>也就是最终会调用到DecorView的draw(canvas)方法，</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ----------------DecorView---------------</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 调用父类的draw方法</span>     <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>mMenuBackground <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         mMenuBackground<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>跟踪super.draw(canvas)方法，最终会跳到View的draw方法。</p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">/**     * Manually render this view (and all of its children) to the given Canvas.     * The view must have already done a full layout before this function is     * called.  When implementing a view, implement     * {@link #onDraw(android.graphics.Canvas)} instead of overriding this method.     * If you do need to override this method, call the superclass version.     *     * @param canvas The Canvas to which the View is rendered.     */</span>    <span class="token annotation punctuation">@CallSuper</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> privateFlags <span class="token operator">=</span> mPrivateFlags<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> dirtyOpaque <span class="token operator">=</span> <span class="token punctuation">(</span>privateFlags <span class="token operator">&amp;</span> PFLAG_DIRTY_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> PFLAG_DIRTY_OPAQUE <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span>mAttachInfo <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>mAttachInfo<span class="token punctuation">.</span>mIgnoreDirtyState<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPrivateFlags <span class="token operator">=</span> <span class="token punctuation">(</span>privateFlags <span class="token operator">&amp;</span> <span class="token operator">~</span>PFLAG_DIRTY_MASK<span class="token punctuation">)</span> <span class="token operator">|</span> PFLAG_DRAWN<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * Draw traversal performs several drawing steps which must be executed         * in the appropriate order:         *         *      1. Draw the background         *      2. If necessary, save the canvas' layers to prepare for fading         *      3. Draw view's content         *      4. Draw children         *      5. If necessary, draw the fading edges and restore layers         *      6. Draw decorations (scrollbars for instance)         */</span>        <span class="token comment" spellcheck="true">// Step 1, draw the background, if needed</span>        <span class="token keyword">int</span> saveCount<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dirtyOpaque<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">drawBackground</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// skip step 2 &amp; 5 if possible (common case)</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> viewFlags <span class="token operator">=</span> mViewFlags<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> horizontalEdges <span class="token operator">=</span> <span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> FADING_EDGE_HORIZONTAL<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> verticalEdges <span class="token operator">=</span> <span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> FADING_EDGE_VERTICAL<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>verticalEdges <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>horizontalEdges<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Step 3, draw the content</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dirtyOpaque<span class="token punctuation">)</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Step 4, draw the children</span>            <span class="token function">dispatchDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">drawAutofilledHighlight</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Overlay is part of the content and draws beneath Foreground</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mOverlay <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mOverlay<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mOverlay<span class="token punctuation">.</span><span class="token function">getOverlayView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispatchDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Step 6, draw decorations (foreground, scrollbars)</span>            <span class="token function">onDrawForeground</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Step 7, draw the default focus highlight</span>            <span class="token function">drawDefaultFocusHighlight</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">debugDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">debugDrawFocus</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// we're done...</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>通过注释可以看到，一般绘制过程分为7步，但第2步和第5步通常可以忽略，大概步骤：</p><p>Step 1. 绘制背景； Step 2. 忽略跳过； Step 3. <strong>绘制内容</strong>； Step 4. <strong>绘制子视图</strong>； Step 5. 忽略跳过； Step 6. 绘制装饰（前景，滚动条）; Step 7. 绘制默认焦点高光。</p><p>可以看到第三步onDraw()，也就是我们自定义View一般必须要重写的一个方法，该方法是空方法，因为每个子View的具体内容不一样，需要我们自己去实现逻辑。</p><p>第四步，即dispatchDraw(canvas):</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ----- View.java -----</span><span class="token comment" spellcheck="true">/**  * Called by draw to draw the child views. This may be overridden  * by derived classes to gain control just before its children are drawn  * (but after its own view has been drawn).  * @param canvas the canvas on which to draw the view  */</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">dispatchDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><p>可以看到View中的该方法是个空实现，但注释写的很清楚，如果该View包含子View的话，就要实现该方法，然后我们去ViewGroup的该方法中去看：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ------ViewGroup---------</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">dispatchDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childrenCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>transientIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> mTransientIndices<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transientIndex<span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> View transientChild <span class="token operator">=</span> mTransientViews<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transientIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>transientChild<span class="token punctuation">.</span>mViewFlags <span class="token operator">&amp;</span> VISIBILITY_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> VISIBLE <span class="token operator">||</span>                    transientChild<span class="token punctuation">.</span><span class="token function">getAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                more <span class="token operator">|=</span> <span class="token function">drawChild</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> transientChild<span class="token punctuation">,</span> drawingTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            transientIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>transientIndex <span class="token operator">>=</span> transientCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                transientIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>可以看到，在遍历其子View的时候，调用了绘制子View的方法，最终调用了子View的draw方法。同样的，如果该子 View 还有子视图，也会继续遍历下去调用 <code>drawChild()</code> 方法，继续绘制子 View，直到叶子 View 为止，这样不断递归下去，直到画完整棵 DecorView 树。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发相关基础知识点</title>
      <link href="/2020/07/13/Java%E5%B9%B6%E5%8F%91%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/07/13/Java%E5%B9%B6%E5%8F%91%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="Java并发相关概念整理"><a href="#Java并发相关概念整理" class="headerlink" title="Java并发相关概念整理"></a>Java并发相关概念整理</h2><h3 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h3><p>自动线程的方式只有两种：</p><ol><li>继承自Thread,然后调用start()方法</li><li>实现Runable接口，然后交给Thread运行</li></ol><hr><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>Java中的线程分为6种状态：</p><ol><li>初始状态(NEW)：新创建了一个线程，但还没有调用start方法</li><li>运行状态(Runable):Java线程中将就绪（ready）和运行中（running）两种状态统称为“运行”；</li></ol><blockquote><p>线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。</p></blockquote><ol start="3"><li>阻塞(BLOCKED)：表示线程阻塞于锁；</li><li>等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）；</li><li>超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回；</li><li>终止(TERMINATED)：表示该线程已经执行完毕。</li></ol><p>状态之间的变迁如下图所示:</p><p><img src="https://i.loli.net/2020/07/12/MZpH65NwcGUSVP2.png" alt=""></p><hr><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>死锁的发生必须具备以下四个必要条件。</p><ol><li><p>互斥条件：指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。</p></li><li><p>请求和保持条件：指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。</p></li><li><p>不剥夺条件：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。</p></li><li><p>环路等待条件：指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。</p></li></ol><p>由于死锁需要上述四个必要条件，所以只要打破以上四种条件中的任何一个，就可以避免死锁。</p><ol><li>打破互斥条件：改造独占性资源为虚拟资源。</li><li>打破不可抢占条件：当一进程占有一独占性资源后又申请一独占性资源而无法满足，则退出原占有的资源。</li><li>打破占有且申请条件：采用资源预先分配策略，即进程运行前申请全部资源，满足则运行，不然就等待，这样就不会占有且申请。</li><li>打破循环等待条件：实现资源有序分配策略，对所有设备实现分类编号，所有进程只能采用按序号递增的形式申请资源。</li></ol><p>解决办法：</p><ol><li>内部通过顺序比较，确定拿锁的顺序；</li><li>采用尝试拿锁的机制。</li></ol><h4 id="其他线程安全问题："><a href="#其他线程安全问题：" class="headerlink" title="其他线程安全问题："></a>其他线程安全问题：</h4><h5 id="活锁："><a href="#活锁：" class="headerlink" title="活锁："></a>活锁：</h5><p>两个线程在尝试拿锁的机制中，发生多个线程之间互相谦让，不断发生同一个线程总是拿到同一把锁，在尝试拿另一把锁时因为拿不到，而将本来已经持有的锁释放的过程。</p><p>解决办法：每个线程休眠随机数，错开拿锁的时间。</p><h5 id="线程饥饿："><a href="#线程饥饿：" class="headerlink" title="线程饥饿："></a>线程饥饿：</h5><p>低优先级的线程，总是拿不到执行时间。</p><hr><h3 id="ThreadLocal-解析"><a href="#ThreadLocal-解析" class="headerlink" title="ThreadLocal 解析"></a>ThreadLocal 解析</h3><h4 id="1-与Synchonized关键字的比较："><a href="#1-与Synchonized关键字的比较：" class="headerlink" title="1.与Synchonized关键字的比较："></a>1.与Synchonized关键字的比较：</h4><blockquote><p>ThreadLocal和Synchonized都用于解决多线程并发訪问。可是ThreadLocal与synchronized有本质的差别。synchronized是利用锁的机制，使变量或代码块在某一时该仅仅能被一个线程訪问。而ThreadLocal为每个线程都提供了变量的副本，使得每个线程在某一时间訪问到的并非同一个对象，这样就隔离了多个线程对数据的数据共享。</p></blockquote><h4 id="2-ThreadLocal的使用"><a href="#2-ThreadLocal的使用" class="headerlink" title="2.ThreadLocal的使用"></a>2.ThreadLocal的使用</h4><ul><li><p>void set(Object value)</p><p>设置当前线程局部变量的值</p></li><li><p>Object get()</p><p>返回当前线程所对应的线程局部变量</p></li><li><p>void remove()</p><p>将当前线程局部变量的值删除，在JDK5.0新增的方法。但显式调用该方法清除线程的局部变量并不是必须的操作，但会加快内存回收的速度。所以推荐手动调用。</p></li><li><p>protected Object initialValue() </p><p>返回该线程局部变量的初始值，该方法是一个protected的方法，显然是为了让子类覆盖而设计的。这个方法是一个延迟调用方法，在线程第1次调用get()或set(Object)时才执行，并且仅执行1次。ThreadLocal中的缺省实现直接返回一个null。</p></li></ul><h4 id="3-ThreadLocal的实现原理"><a href="#3-ThreadLocal的实现原理" class="headerlink" title="3. ThreadLocal的实现原理"></a>3. ThreadLocal的实现原理</h4><p>如下图：</p><p><img src="https://i.loli.net/2020/07/13/NS8tQI5ejnokR2s.jpg" alt=""></p><p>ThreadLocal内部实现，主要关注其set()和get()方法</p><ul><li><p>set()方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span><span class="token punctuation">{</span>  Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">getCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ThreadLocalMap <span class="token function">getMap</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">,</span> T firstValue<span class="token punctuation">)</span><span class="token punctuation">{</span>  t<span class="token punctuation">.</span>threadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>ThreadLocal内部有一个实例变量：</p><pre class=" language-java"><code class="language-java">ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap threadLocals <span class="token operator">=</span> null</code></pre></li><li><p>get()方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取当前的Thread对象</span>    Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// getMap方法获取对应的ThreadLocalMap对象</span>    ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断map是否为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果map不为空，则以当前的ThreadLocal为Key，获取到Entry对象，并从中取值返回</span>      ThreadLocalMap<span class="token punctuation">.</span>Entry e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        T result <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果map为空，则调setInitialValue方法，</span>    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span><span class="token punctuation">}</span><span class="token keyword">private</span> T <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    T value <span class="token operator">=</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回空</span>    Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>ThreadLocalMap的源码</p><p><img src="https://i.loli.net/2020/07/13/hWoGgScsu6yCJ57.png" alt=""></p><p>可以看到有个Entry内部静态类，它继承了WeakReference，总之它记录了两个信息，一个是ThreadLocal&lt;?&gt;类型，一个是Object类型的值。getEntry方法则是获取某个ThreadLocal对应的值，set方法就是更新或赋值相应的ThreadLocal对应的值。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Entry <span class="token function">getEntry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashcode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Entry e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>回顾我们的get方法，其实就是拿到<strong>每个线程独有的ThreadLocalMap</strong></p><p>然后再用ThreadLocal的当前实例，拿到Map中的相应的Entry，然后就可以拿到相应的值返回出去。当然，如果Map为空，还会先进行map的创建，初始化等工作。</p></li></ul><hr><h3 id="CAS原理"><a href="#CAS原理" class="headerlink" title="CAS原理"></a>CAS原理</h3><h4 id="1-什么是原子操作？"><a href="#1-什么是原子操作？" class="headerlink" title="1. 什么是原子操作？"></a>1. 什么是原子操作？</h4><p>假定有两个操作A和B，A和B的操作可能都很复杂，如果从执行A的线程来看，当另一个线程执行B时，要么将B全部执行完，要么完全不执行，那么A和B对彼此来说是原子的。</p><h4 id="2-如何实现原子操作？"><a href="#2-如何实现原子操作？" class="headerlink" title="2.如何实现原子操作？"></a>2.如何实现原子操作？</h4><p>实现原子操作可以使用锁机制，比如synchronized关键字，完全可以满足我们的需求。但sychronized关键字是基于阻塞的锁机制，也就是说当一个线程拥有锁的时候，访问同一资源的其他线程都会被阻塞，直到该线程释放锁。</p><p>这样就会出现一些问题：</p><ol><li>如果被阻塞的线程优先级很高，或者很重要，我们希望它很快就被执行，但拥有锁的线程一直不释放锁，就不满足我们的期望；</li><li>如果有大量线程都来竞争资源，CPU将会花费大量的时间和资源来处理这种竞争（上下文切换），同时还可能出现死锁等糟糕的现象。</li><li>锁机制是一种比较粗糙、粒度较大的机制，相对于少量资源的同步来说太过于笨重。</li></ol><p>实现原子操作还可以使用当前的处理器基本都支持CAS()的指令，只不过每个厂家所实现的算法并不一样，每一个CAS操作过程都包含三个运算符：一个内存地址V，一个期望的值A和一个新值B，操作的时候如果这个地址上存放的值等于这个期望的值A，则将地址上的值赋为新值B，否则不做任何操作。</p><p><strong>CAS</strong>的基本思路就是，如果这个地址上的值和期望的值相等，则给其赋予新值，否则不做任何事儿，但是要返回原值是多少。循环CAS就是在一个循环里不断的做cas操作，直到成功为止。</p><p><img src="https://i.loli.net/2020/07/13/UC7mZwSh85gcxrO.png" alt=""></p><h4 id="3-CAS实现原子操作的三大问题"><a href="#3-CAS实现原子操作的三大问题" class="headerlink" title="3. CAS实现原子操作的三大问题"></a>3. CAS实现原子操作的三大问题</h4><h5 id="1）ABA问题"><a href="#1）ABA问题" class="headerlink" title="1）ABA问题"></a>1）ABA问题</h5><p>因为CAS需要在操作值的时候，检查值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。</p><p>ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1，那么A→B→A就会变成1A→2B→3A。</p><h5 id="2）循环时间长开销大"><a href="#2）循环时间长开销大" class="headerlink" title="2）循环时间长开销大"></a>2）循环时间长开销大</h5><p>自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。</p><h5 id="3）只能保证对一个变量的原子操作"><a href="#3）只能保证对一个变量的原子操作" class="headerlink" title="3）只能保证对一个变量的原子操作"></a>3）只能保证对一个变量的原子操作</h5><p>当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。</p><p>还有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如，有两个共享变量i＝2，j=a，合并一下ij=2a，然后用CAS来操作ij。从Java 1.5开始，JDK提供了AtomicReference类来保证引用对象之间的原子性，就可以把多个变量放在一个对象里来进行CAS操作。</p><h4 id="4-JDK中原子操作类的使用"><a href="#4-JDK中原子操作类的使用" class="headerlink" title="4. JDK中原子操作类的使用"></a>4. JDK中原子操作类的使用</h4><h5 id="1）基本类型"><a href="#1）基本类型" class="headerlink" title="1）基本类型"></a>1）基本类型</h5><ol><li>AtomicBoolean：以原子更新的方式更新 boolean；</li><li>AtomicInteger：以原子更新的方式更新 Integer;</li><li>AtomicLong：以原子更新的方式更新 Long；</li></ol><p>这几个类的用法基本一致，以 AtomicInteger 为例常用的方法</p><ol><li>addAndGet(int delta) ：以原子方式将输入的数值与实例中原本的值相加，并返回最后的结果；</li><li>incrementAndGet() ：以原子的方式将实例中的原值进行加 1 操作，并返回最终相加后的结果；</li><li>getAndSet(int newValue)：将实例中的值更新为新值，并返回旧值；</li><li>getAndIncrement()：以原子的方式将实例中的原值加 1，返回的是自增前的旧值；</li></ol><h5 id="2）数组类型"><a href="#2）数组类型" class="headerlink" title="2）数组类型"></a>2）数组类型</h5><ol><li>AtomicIntegerArray：原子更新整型数组中的元素；</li><li>AtomicLongArray：原子更新长整型数组中的元素；</li><li>AtomicReferenceArray：原子更新引用类型数组中的元素</li></ol><p>这几个类的用法一致，就以 AtomicIntegerArray 来总结下常用的方法：</p><ol><li>addAndGet(int i, int delta)：以原子更新的方式将数组中索引为 i 的元素与输入值相加；</li><li>getAndIncrement(int i)：以原子更新的方式将数组中索引为 i 的元素自增加 1；</li><li>compareAndSet(int i, int expect, int update)：将数组中索引为 i 的位置的元素进行更新</li></ol><p>可以看出，AtomicIntegerArray 与 AtomicInteger 的方法基本一致，只不过在 AtomicIntegerArray 的方法中会多一个指定数组索引位 i。</p><h5 id="3）引用类型"><a href="#3）引用类型" class="headerlink" title="3）引用类型"></a>3）引用类型</h5><ol><li>AtomicReference：原子更新引用类型；</li><li>AtomicReferenceFieldUpdater：原子更新引用类型里的字段；</li><li>AtomicMarkableReference：原子更新带有标记位的引用类型；</li></ol><h5 id="4）字段类型"><a href="#4）字段类型" class="headerlink" title="4）字段类型"></a>4）字段类型</h5><p>AtomicIntegeFieldUpdater：原子更新整型字段类；</p><p>AtomicLongFieldUpdater：原子更新长整型字段类；</p><p>AtomicStampedReference：原子更新引用类型，这种更新方式会带有版本号。而为什么在更新的时候会带有版本号，是为了解决 CAS 的 ABA 问题；</p><p>要想使用原子更新字段需要两步操作：</p><ol><li>原子更新字段类都是抽象类，只能通过静态方法<code>newUpdater</code>来创建一个更新器，并且需要设置想要更新的类和属性；</li><li>更新类的属性必须使用<code>public volatile</code>进行修饰；</li></ol><hr><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>在Java开发中，合理的利用线程池可以有以下好处：</p><ol><li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li>提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。假设一个服务器完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务的时间，T3 销毁线程时间。  如果：T1 + T3 远大于 T2，则可以采用线程池，以提高服务器性能。线程池技术正是关注如何缩短或调整T1,T3时间的技术，从而提高服务器程序性能的。它把T1，T3分别安排在服务器程序的启动和结束的时间段或者一些空闲的时间段，这样在服务器程序处理客户请求时，不会有T1，T3的开销了。</li><li>提高线程的可管理性。线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。</li></ol><h4 id="1-ThreadPoolExecutor-的类关系"><a href="#1-ThreadPoolExecutor-的类关系" class="headerlink" title="1.ThreadPoolExecutor 的类关系"></a>1.ThreadPoolExecutor 的类关系</h4><ul><li><p>Executor是一个接口，它是Executor框架的基础，它将任务的提交与任务的执行分离开来。</p></li><li><p>ExecutorService接口继承了Executor，在其上做了一些shutdown()、submit()的扩展，可以说是真正的线程池接口；</p></li><li><p>AbstractExecutorService抽象类实现了ExecutorService接口中的大部分方法；</p></li><li><p>ThreadPoolExecutor是线程池的核心实现类，用来执行被提交的任务。</p></li><li><p>ScheduledExecutorService接口继承了ExecutorService接口，提供了带”周期执行”功能ExecutorService；</p></li><li><p>ScheduledThreadPoolExecutor是一个实现类，可以在给定的延迟后运行命令，或者定期执行命令。ScheduledThreadPoolExecutor比Timer更灵活，功能更强大。</p></li></ul><h4 id="2-线程池创建各个参数的含义"><a href="#2-线程池创建各个参数的含义" class="headerlink" title="2.线程池创建各个参数的含义"></a>2.线程池创建各个参数的含义</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span>  <span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//核心线程数</span>  <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//最大线程数</span>  <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程存活时间</span>  TimeUnit unit<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//线程存活时间单位</span>  BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//阻塞队列</span>  ThreadFactory threadFactory<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程工厂</span>  RejectedExecutionHandler handler    <span class="token comment" spellcheck="true">//拒绝策略</span><span class="token punctuation">)</span></code></pre><h5 id="1）corePoolSize"><a href="#1）corePoolSize" class="headerlink" title="1）corePoolSize"></a>1）corePoolSize</h5><p>线程中的核心线程数，当提交一个任务时，线程池创建一个新线程执行任务，直到当前线程数等于corePoolSize;</p><p>如果当前线程数为corePoolSize，继续提交的任务会被保存在阻塞队列中，等待被执行；</p><p>如果执行了线程池的prestartAllCoreThreads()方法，线程池会提前创建并启动所有的核心线程。</p><h5 id="2）maximumPoolSize"><a href="#2）maximumPoolSize" class="headerlink" title="2）maximumPoolSize"></a>2）maximumPoolSize</h5><p>线程池中允许的最大线程数。如果当前阻塞队列满了，且继续提交任务，则创建新的线程执行任务，前提是当前线程数小于maximumPoolSize。</p><h5 id="3）keepAliveTime"><a href="#3）keepAliveTime" class="headerlink" title="3）keepAliveTime"></a>3）keepAliveTime</h5><p>线程空闲时的存活时间，即当线程没有任务执行时，继续存活的时间。默认情况下，该参数只在线程数大于corePoolSize时才有用。</p><h5 id="4）TimeUnit"><a href="#4）TimeUnit" class="headerlink" title="4）TimeUnit"></a>4）TimeUnit</h5><p>keepAliveTime的时间单位。</p><h5 id="5）workQueue"><a href="#5）workQueue" class="headerlink" title="5）workQueue"></a>5）workQueue</h5><p>workQueue必须是BlockingQueue阻塞队列。当线程池中的线程数超过它的corePoolSize的时候，线程会进入阻塞队列进行阻塞等待。通过workQueue，线程池实现了阻塞功能。</p><p>一般来说，我们应该尽量使用有界队列，因为使用无界队列作为工作队列会对线程池带来如下影响。</p><p>1）当线程池中的线程数达到corePoolSize后，新任务将在无界队列中等待，因此线程池中的线程数不会超过corePoolSize。</p><p>2）由于1，使用无界队列时maximumPoolSize将是一个无效参数。</p><p>3）由于1和2，使用无界队列时keepAliveTime将是一个无效参数。</p><p>4）更重要的，使用无界queue可能会耗尽系统资源，有界队列则有助于防止资源耗尽，同时即使使用有界队列，也要尽量控制队列的大小在一个合适的范围。</p><h5 id="6）threadFactory"><a href="#6）threadFactory" class="headerlink" title="6）threadFactory"></a>6）threadFactory</h5><p>创建线程的工厂，通过自定义的线程工厂可以给每个新建的线程设置一个具有识别度的线程名，当然还可以更加自由的对线程做更多的设置，比如设置所有的线程为守护线程。</p><p>Executors静态工厂里默认的threadFactory，线程的命名规则是“pool-数字-thread-数字”。</p><h5 id="7）RejectedExecutionHandler"><a href="#7）RejectedExecutionHandler" class="headerlink" title="7）RejectedExecutionHandler"></a>7）RejectedExecutionHandler</h5><p>线程池的饱和策略，当阻塞队列满了，且没有空闲的工作线程，如果继续提交任务，必须采取一种策略处理该任务，线程池提供了4种策略：</p><p>（1）AbortPolicy：直接抛出异常，默认策略；</p><p>（2）CallerRunsPolicy：用调用者所在的线程来执行任务；</p><p>（3）DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；</p><p>（4）DiscardPolicy：直接丢弃任务；</p><p>当然也可以根据应用场景实现RejectedExecutionHandler接口，自定义饱和策略，如记录日志或持久化存储不能处理的任务。</p><h4 id="3-线程池的工作机制"><a href="#3-线程池的工作机制" class="headerlink" title="3 线程池的工作机制"></a>3 线程池的工作机制</h4><ol><li>如果当前运行的线程少于corePoolSize，则创建新线程来执行任务（注意，执行这一步骤需要获取全局锁）。</li><li>如果运行的线程等于或多于corePoolSize，则将任务加入BlockingQueue。</li><li>如果无法将任务加入BlockingQueue（队列已满），则创建新的线程来处理任务。</li><li>如果创建新线程将使当前运行的线程超出maximumPoolSize，任务将被拒绝，并调用RejectedExecutionHandler.rejectedExecution()方法。</li></ol><h4 id="4-提交任务"><a href="#4-提交任务" class="headerlink" title="4 提交任务"></a>4 提交任务</h4><p>execute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功。</p><p>submit()方法用于提交需要返回值的任务。线程池会返回一个future类型的对象，通过这个future对象可以判断任务是否执行成功，并且可以通过future的get()方法来获取返回值，get()方法会阻塞当前线程直到任务完成，而使用get（long timeout，TimeUnit unit）方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。</p><h4 id="5-关闭线程池"><a href="#5-关闭线程池" class="headerlink" title="5 关闭线程池"></a>5 关闭线程池</h4><p>可以通过调用线程池的shutdown()或shutdownNow()方法来关闭线程池。原理是遍历线程池中的工作线程，然后逐个调用工作线程的interrupt()方法来中断线程，所以无法响应中断的任务可能永远无法停止。但两种方式存在一定的区别，shutdownNow()方法首先将线程池的状态置为STOP，然后尝试停止所有正在执行或者暂停任务的线程，并返回等待执行任务的列表，而shutdown()方法只是将线程池的状态置为SHUTDOWN状态，然后中断所有没有正在执行任务的线程。</p><p>只要调用了这两个关闭方法中的任意一个，isShutdown()方法就会返回true。当所有的任务都已关闭后，才表示线程池关闭成功，这时调用isTerminaed()方法会返回true。至于应该调用哪一种方法来关闭线程池，应该由提交到线程池的任务特性决定，通常调用shutdown()方法来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow方法。</p><h4 id="6-合理分配线程池"><a href="#6-合理分配线程池" class="headerlink" title="6 合理分配线程池"></a>6 合理分配线程池</h4><p>要想合理地配置线程池，就必须首先分析任务特性，可以从以下几个角度来分析。</p><ul><li><p>任务的性质：CPU密集型任务、IO密集型任务和混合型任务。</p></li><li><p>任务的优先级：高、中和低。</p></li><li><p>任务的执行时间：长、中和短。</p></li><li><p>任务的依赖性：是否依赖其他系统资源，如数据库连接。</p></li></ul><p>性质不同的任务可以用不同规模的线程池分开处理。</p><p>CPU密集型任务应配置尽可能小的线程，如配置Ncpu+1个线程的线程池。由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如2*Ncpu。</p><p>混合型的任务，如果可以拆分，将其拆分成一个CPU密集型任务和一个IO密集型任务，只要这两个任务执行的时间相差不是太大，那么分解后执行的吞吐量将高于串行执行的吞吐量。如果这两个任务执行时间相差太大，则没必要进行分解。可以通过Runtime.getRuntime().availableProcessors()方法获得当前设备的CPU个数。</p><p>优先级不同的任务可以使用优先级队列PriorityBlockingQueue来处理。它可以让优先级高的任务先执行。</p><p>执行时间不同的任务可以交给不同规模的线程池来处理，或者可以使用优先级队列，让执行时间短的任务先执行。</p><p>建议使用有界队列。有界队列能增加系统的稳定性和预警能力，可以根据需要设大一点儿，比如几千。</p><p>如果当时我们设置成无界队列，那么线程池的队列就会越来越多，有可能会撑满内存，导致整个系统不可用，而不只是后台任务出现问题。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
